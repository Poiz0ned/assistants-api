name: Rust CI

on:
  push:
    paths:
      - "**.rs"
      - "**.toml"
      - "**/workflows/**.yml"
      - "**/docker/**"
  # pull_request: # ! leaking creds
  #   paths:
  #     - "**.rs"
  #     - "**.toml"
  #     - "**/workflows/**.yml"
  #     - "**/docker/**"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}/hal-9100
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Start Docker containers
        run: |
          docker compose -f docker/docker-compose.yml up -d

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:secret@localhost:5432/mydatabase
          REDIS_URL: redis://127.0.0.1/
          S3_ENDPOINT: http://localhost:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin
          S3_BUCKET_NAME: mybucket
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }} # TODO: dont think these api keys are used
          MODEL_API_KEY: ${{ secrets.MODEL_API_KEY }}
          MODEL_URL: ${{ secrets.MODEL_URL }}
          TEST_MODEL_NAME: ${{ secrets.TEST_MODEL_NAME }}
        run: RUST_TEST_THREADS=1 cargo test

  rust-build:
    needs: test
    if: contains(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            docker_platform: linux/amd64
          - target: aarch64-unknown-linux-gnu
            docker_platform: linux/arm64
          - target: aarch64-unknown-linux-gnu
            docker_platform: linux/arm64/v8
    steps:
      - uses: actions/checkout@v2

      # TODO: not sure two steps necessary this approach seems more used by rust project
      - uses: Swatinem/rust-cache@v2

      # Cache Rust dependencies
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo target directory
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}

      # Install cross
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Cross-compile Rust binaries for each platform
      - name: Build Rust binaries for ${{ matrix.target }}
        run: |
          cargo clean # https://github.com/cross-rs/cross/issues/724
          cross build --target ${{ matrix.target }} --release --bin hal-9100
          mkdir -p ./docker/target/release
        env:
          SQLX_OFFLINE: true

      - name: Upload Rust build artifact
        uses: actions/upload-artifact@v2
        with:
          name: rust-build-artifact
          path: ./target

  docker-build:
    needs: rust-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            docker_platform: linux/amd64
          - target: aarch64-unknown-linux-gnu
            docker_platform: linux/arm64
          - target: aarch64-unknown-linux-gnu
            docker_platform: linux/arm64/v8
    if: contains(github.event.head_commit.message, 'Release')
    steps:
      - uses: actions/checkout@v2

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.head_commit.message }}
          regex: "^Release ([^ ]+)"

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ steps.regex-match.outputs.group1 }}
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Download Rust build artifact
        uses: actions/download-artifact@v2
        with:
          name: rust-build-artifact
          path: ./target

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: ${{ matrix.docker_platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          tags: ${{ env.REGISTRY_IMAGE }}
          build-args: |
            BINARY_PATH=./target/${{ matrix.target }}/release/hal-9100

      - name: Export Digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload Digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  merge:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Download Digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.head_commit.message }}
          regex: "^Release ([^ ]+)"

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ steps.regex-match.outputs.group1 }}
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Create Manifest and Push Image
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  docker-build-code-interpreter:
    needs: test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Release')

    steps:
      - uses: actions/checkout@v2

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.head_commit.message }}
          regex: "^Release ([^ ]+)"

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/hal-9100-code-interpreter:${{ steps.regex-match.outputs.group1 }}, ${{ secrets.DOCKERHUB_USERNAME }}/hal-9100-code-interpreter:${{ steps.regex-match.outputs.group1 }}
          file: docker/Dockerfile.code-interpreter
          platforms: linux/amd64,linux/arm64,linux/arm64/v8

